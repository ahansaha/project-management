spring.datasource.url=jdbc:postgresql://localhost:5432/pma-springbootdb
#jdbc:<driver>://<hostname>:<port>/<dbName>
#jdbc:postgresql://localhost:5432/pma-springbootdb

spring.datasource.username=postgres
spring.datasource.password=AHan@3110


#This means it won't use the sql file that we created to load up the data in the db.
#We don't want dummy data to be loaded up in production.
#Now you will notice that we didn't use this property in the application-test properties when we were using
#the h2 db. This is beacuse in embedded db's such as h2 db don't need this property.
#The sql file will run by default during the start of the application.
spring.datasource.initialization-mode=never


#This property is generally is used to dervie tables from the entity classes we have created using Java code.
#This property doesn't need to be specified for embedded db's. It happens in embedded db's by default.
#If we set this property to NONE tables won't be created by java code, which is what we want in production.
#In production we don't use java code to create tables. We can set this property to validate, so that
#hibernate can verify the table names and the data types from the java code in the entity classes to the 
#real production db u are connecting to. This property is only enabled when it comes to embedded in memory db
#like h2 db. And it is enabled by default.
spring.jpa.hibernate.ddl-auto=none


#This is used to prevent sql exceptions.
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true


#This will show the sql logs in the console which we need during development.
spring.jpa.show-sql=true

#In development it is ok to keep this as false. But in production we won't
spring.thymeleaf.cache=false


version=localDevPostGres